package hacks.exploitr.projectheart.ui;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.text.format.Formatter;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;

import hacks.exploitr.projectheart.R;
import hacks.exploitr.projectheart.databinding.ActivityMainBinding;
import hacks.exploitr.projectheart.databinding.ConfigLayoutBinding;

public class MainActivity extends AppCompatActivity implements FragmentChangeListener {

	private AppBarConfiguration appBarConfiguration;
	private ActivityMainBinding binding;
	private List<WifiConfiguration> configurations;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		startActivity(new Intent(this,Test.class));

		/*binding = ActivityMainBinding.inflate(getLayoutInflater());
		setContentView(binding.getRoot());

		setSupportActionBar(binding.toolbar);

		NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
		appBarConfiguration = new AppBarConfiguration.Builder(navController.getGraph()).build();
		NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);*/
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.menu_main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();

		if (id == R.id.action_settings) {
			changeConfig();
			return true;
		}

		return super.onOptionsItemSelected(item);
	}

	private void changeConfig() {
		WifiManager manager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);

		View view = getLayoutInflater().inflate(R.layout.config_layout, null);
		ConfigLayoutBinding binding = ConfigLayoutBinding.bind(view);

		AlertDialog dialog = new AlertDialog.Builder(this)
				.setView(view)
				.setCancelable(false)
				.create();

		binding.exitButton.setOnClickListener(view1 -> {
			if (dialog.isShowing())
				dialog.dismiss();
		});

		binding.curWifi.setOnClickListener(view12 -> {
			WifiInfo info = manager.getConnectionInfo();
			binding.configSsid.setText(info.getSSID().replace("\"", ""));
		});

		binding.update.setOnClickListener(view13 -> {
			String ssid = binding.configSsid.getText().toString() + "";
			String pass = binding.configPass.getText().toString() + ""; //avoid null

			if (!ssid.isEmpty()) {
				binding.statusText.setText("Connecting to config server, please ensure it's online...");
				binding.statusProgress.setProgress(5);
				switchButtons(binding, false);

				WifiConfiguration conf = new WifiConfiguration();
				conf.SSID = "\"config_server\"";
				conf.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
				int networkId = manager.addNetwork(conf);

				binding.statusProgress.setProgress(10);

				manager.disconnect();
				manager.enableNetwork(networkId, true);
				manager.reconnect();

				binding.statusProgress.setProgress(20);
				uploadCred(manager, binding.statusProgress, ssid, pass, binding);
			} else {
				Toast.makeText(getBaseContext(), "Invalid Config", Toast.LENGTH_SHORT).show();
			}
		});

		if (!this.isFinishing())
			dialog.show();
	}

	private void uploadCred(WifiManager manager, ProgressBar progressBar, String ssid, String password, ConfigLayoutBinding binding) {
		new Thread(() -> {
			int gateway;
			while ((gateway = manager.getDhcpInfo().gateway) == 0) {
				System.out.println(".");
			}
			Socket socket;
			PrintWriter writer;
			BufferedReader reader;
			String read;
			try {
				socket = new Socket(Formatter.formatIpAddress(gateway), 188);
				socket.getInputStream();
				writer = new PrintWriter(socket.getOutputStream(), true);
				reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

				writer.write("ready");
				while ((read = reader.readLine()) == null) {
					System.out.println("waiting for receivable");
				}
				if (read.equals("ready")) {
					runOnUiThread(() -> progressBar.setProgress(50));
				} else {
					throw new IOException("Didn't receive ready");
				}

				writer.write("{\n" +
						"  \"ssi\": \"" + ssid.trim() + "\",\n" +
						"  \"pas\": \"" + password.trim() + "\"\n" +
						"}");
				while ((read = reader.readLine()) == null) {
					System.out.println("waiting for receivable");
				}
				if (read.equals("ack")) {
					runOnUiThread(() -> {
						progressBar.setProgress(100);
						Toast.makeText(getBaseContext(), "Monitor Updated! It'll soon connect to newly configured network!", Toast.LENGTH_SHORT).show();
						switchButtons(binding, true);
					});
				} else {
					throw new IOException("Didn't receive ready");
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
	}

	void switchButtons(ConfigLayoutBinding layoutBinding, boolean state) {
		layoutBinding.exitButton.setEnabled(state);
		layoutBinding.curWifi.setEnabled(state);
		layoutBinding.update.setEnabled(state);
	}

	@Override
	public boolean onSupportNavigateUp() {
		NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
		return NavigationUI.navigateUp(navController, appBarConfiguration)
				|| super.onSupportNavigateUp();
	}

	@Override
	public void onChangeTo(String frag_name) {
		binding.toolbar.setTitle(frag_name);
	}
}