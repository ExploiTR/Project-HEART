package hacks.exploitr.projectheart.ui;

import android.graphics.Typeface;
import android.media.AudioManager;
import android.media.ToneGenerator;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;

import java.util.ArrayList;
import java.util.List;

import hacks.exploitr.projectheart.R;
import hacks.exploitr.projectheart.databinding.ActivityProcessingBinding;
import hacks.exploitr.projectheart.tf.AI;

public class Processing extends AppCompatActivity {

    ArrayList<Integer> result = new ArrayList<>();
    int zero, one, two, three, four;

    String[] causes = new String[]{
            "Everything seems pretty normal here.\nNothing much to worry about.",
            "Supraventrical Ectopics Detected. Supraventricular tachycardia (SVT) is generally not life-threatening unless you have heart damage or other heart conditions." +
                    " However, in extreme cases, an episode of SVT may cause unconsciousness or cardiac arrest.Some of the triggers for irregularity include:" +
                    " caffeine, tobacco, alcohol, cough and cold medicine, " +
                    "high blood pressure, anxiety, stress, sleep apnea, lung disease, and heart disease.\nPlease, seek professional medical advice.",
            "Ventricular ectopics are a type of arrhythmia or abnormal heart rhythm. It is caused by the electric signals in the heart starting in a different place " +
                    "and travelling a different way through the heart. If it happens occasionally, it should not cause any problems but if it happens a lot, " +
                    "you will need to have treatment. If, like most people, you have a structurally normal heart, ventricular ectopics are almost always benign and don't" +
                    " require any treatment, unless they are causing symptoms.\nPlease, seek professional medical advice.",
            "Ventricular fusion beats can occur when the heart's natural rhythm and the impulse from a pacemaker coincide to activate the same part of a ventricle at the same time, " +
                    "causing visible variation in configuration and height of the QRS complex of an electrocardiogram reading of the heart's activity." +
                    "Rare or isolated fusion beats caused by pacemakers are normal as well," +
                    " but if they occur too frequently may reduce cardiac output and so can require adjustment of the pacemaker.\nPlease, seek professional medical advice.",
            "Something is wrong here, but we're not entirely sure what.\nPlease, seek professional medical advice asap.",
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        View view = getLayoutInflater().inflate(R.layout.activity_processing, null);
        ActivityProcessingBinding binding = ActivityProcessingBinding.bind(view);
        setContentView(view);

        setTitle("Analysis Results");

        ArrayList<Integer> data = SecondFragment.saveQueue;
        if (data == null)
            return;
        else System.out.println(data);

        int firstIdx = data.indexOf(500);

        List<Integer> newData = data.subList(firstIdx, data.size());
        int totalSampleSize = (int) (newData.size() / 188f);

        for (int i = 0; i < totalSampleSize; i++) {
            List<Integer> yes = newData.subList(i * 188, (i * 188) + 187);
            AI.getInstance().getType(getBaseContext(), convertIntegers(yes), new AI.AnswerListener() {
                @Override
                public void output(int out) {
                    result.add(out);
                }

                @Override
                public void onStart() {
                }

                @Override
                public void errorDes(String err) {

                }
            });
        }
        for (int res : result) {
            if (res == 0)
                zero++;
            else if (res == 1)
                one++;
            else if (res == 2)
                two++;
            else if (res == 3)
                three++;
            else
                four++;
        }
        float p0 = (zero * 100f) / totalSampleSize;
        float p1 = (one * 100f) / totalSampleSize;
        float p2 = (two * 100f) / totalSampleSize;
        float p3 = (three * 100f) / totalSampleSize;
        float p4 = (four * 100f) / totalSampleSize;

        binding.textView.setText(String.format(getString(R.string.normal_beats_0), p0, totalSampleSize));
        binding.textView2.setText(String.format(getString(R.string.supraventrical_beats_1), p1, totalSampleSize));
        binding.textView3.setText(String.format(getString(R.string.ventricular_beats_2), p2, totalSampleSize));
        binding.textView4.setText(String.format(getString(R.string.fusion_beats_3), p3, totalSampleSize));
        binding.textView5.setText(String.format(getString(R.string.unknown_beats_4), p4, totalSampleSize));

        TextView[] all = new TextView[]{binding.textView, binding.textView2, binding.textView3, binding.textView4, binding.textView5};

        List<PieEntry> entries = new ArrayList<>();
        entries.add(new PieEntry(p0, "NB"));
        entries.add(new PieEntry(p1, "SEB"));
        entries.add(new PieEntry(p2, "VEB"));
        entries.add(new PieEntry(p3, "FB"));
        entries.add(new PieEntry(p4, "?-B"));

        PieDataSet set = new PieDataSet(entries, "Chart");
        set.setColors(getColor(R.color.blue_700),
                getColor(R.color.amber_700),
                getColor(R.color.cyan_700),
                getColor(R.color.green_700),
                getColor(R.color.red_700));
        PieData _data = new PieData(set);

        int select = p0 > p1 ? p0 > p2 ? p0 > p3 ? p0 > p4 ? 0 : 4 : 3 : 2 : 1;
        binding.diseaseDesc.setText(causes[select]);
        all[select].setTypeface(Typeface.defaultFromStyle(Typeface.BOLD));

        Description description = new Description();
        description.setText("Result Chart");
        binding.pieChart.setDescription(description);

        binding.pieChart.setData(_data);
        binding.pieChart.invalidate(); // refresh

        testTone(p0);
    }

    private void testTone(float p0) {
        if (p0 < 95) {
            toneSeq(1);
        } else if (p0 < 80) {
            toneSeq(2);
        } else if (p0 < 70) {
            toneSeq(3);
        } else if (p0 <= 50) {
            toneSeq(4);
        }
    }

    private void toneSeq(int seq) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ToneGenerator toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);
                for (int i = 0; i < seq; i++) {
                    toneGen1.startTone(ToneGenerator.TONE_CDMA_PIP, 250);
                    toneGen1.stopTone();
                    try {
                        Thread.sleep(250);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
    }

    public static int[] convertIntegers(List<Integer> integers) {
        int[] ret = new int[integers.size()];
        for (int i = 0; i < ret.length; i++) {
            ret[i] = integers.get(i);
        }
        return ret;
    }
}