package hacks.exploitr.projectheart.ui;

import android.os.Bundle;
import android.view.View;

import androidx.appcompat.app.AppCompatActivity;

import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.data.PieData;
import com.github.mikephil.charting.data.PieDataSet;
import com.github.mikephil.charting.data.PieEntry;

import java.util.ArrayList;
import java.util.List;

import hacks.exploitr.projectheart.R;
import hacks.exploitr.projectheart.databinding.ActivityProcessingBinding;
import hacks.exploitr.projectheart.tf.AI;

public class Processing extends AppCompatActivity {

    ArrayList<Integer> result = new ArrayList<>();
    int zero, one, two, three, four;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        View view = getLayoutInflater().inflate(R.layout.activity_processing, null);
        ActivityProcessingBinding binding = ActivityProcessingBinding.bind(view);
        setContentView(view);

        setTitle("Analysis Results");

        ArrayList<Integer> data = SecondFragment.saveQueue;
        if (data == null)
            return;
        else System.out.println(data);

        int firstIdx = data.indexOf(500);

        List<Integer> newData = data.subList(firstIdx, data.size());
        int totalSampleSize = (int) (newData.size() / 188f);

        for (int i = 0; i < totalSampleSize; i++) {
            List<Integer> yes = newData.subList(i * 188, (i * 188) + 187);
            AI.getInstance().getType(getBaseContext(), convertIntegers(yes), new AI.AnswerListener() {
                @Override
                public void output(int out) {
                    result.add(out);
                }

                @Override
                public void onStart() {
                }

                @Override
                public void errorDes(String err) {

                }
            });
        }
        for (int res : result) {
            if (res == 0)
                zero++;
            else if (res == 1)
                one++;
            else if (res == 2)
                two++;
            else if (res == 3)
                three++;
            else
                four++;
        }
        float p0 = (zero * 100f) / totalSampleSize;
        float p1 = (one * 100f) / totalSampleSize;
        float p2 = (two * 100f) / totalSampleSize;
        float p3 = (three * 100f) / totalSampleSize;
        float p4 = (four * 100f) / totalSampleSize;

        binding.textView.setText(String.format(getString(R.string.normal_beats_0), p0, totalSampleSize));
        binding.textView2.setText(String.format(getString(R.string.supraventrical_beats_1), p1, totalSampleSize));
        binding.textView3.setText(String.format(getString(R.string.ventricular_beats_2), p2, totalSampleSize));
        binding.textView4.setText(String.format(getString(R.string.fusion_beats_3), p3, totalSampleSize));
        binding.textView5.setText(String.format(getString(R.string.unknown_beats_4), p4, totalSampleSize));

        List<PieEntry> entries = new ArrayList<>();
        entries.add(new PieEntry(p0, "NB"));
        entries.add(new PieEntry(p1, "SEB"));
        entries.add(new PieEntry(p2, "VEB"));
        entries.add(new PieEntry(p3, "FB"));
        entries.add(new PieEntry(p4, "?-B"));

        PieDataSet set = new PieDataSet(entries, "Chart");
        set.setColors(getColor(R.color.blue_700),
                getColor(R.color.amber_700),
                getColor(R.color.cyan_700),
                getColor(R.color.green_700),
                getColor(R.color.red_700));
        PieData _data = new PieData(set);

        Description description = new Description();
        description.setText("Result Chart");
        binding.pieChart.setDescription(description);

        binding.pieChart.setData(_data);
        binding.pieChart.invalidate(); // refresh
    }

    public static int[] convertIntegers(List<Integer> integers) {
        int[] ret = new int[integers.size()];
        for (int i = 0; i < ret.length; i++) {
            ret[i] = integers.get(i);
        }
        return ret;
    }
}