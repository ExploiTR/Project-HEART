package hacks.exploitr.projectheart.tf;

import android.content.Context;

import org.tensorflow.lite.DataType;
import org.tensorflow.lite.support.tensorbuffer.TensorBuffer;

import java.io.IOException;

import hacks.exploitr.projectheart.ml.Normalized;

public class AI {
	private static AI instance;
	public static final String[] DISEASES = new String[]{
			"Non Ectopic beats (Normal beats)",
			"Supraventrical ectopic beats",
			"Ventricular ectopic beats",
			"Fusion beats",
			"Unknown beats"
	};

	private AI() {

	}

	public static AI getInstance() {
		return instance != null ? instance : (instance = new AI());
	}

	public void getType(Context context, int[] input, AnswerListener listener) {
		listener.onStart();
		try {
			Normalized model = Normalized.newInstance(context);
			// Creates inputs for reference.
			TensorBuffer inputFeature = TensorBuffer.createFixedSize(new int[]{1, 187}, DataType.FLOAT32);
			inputFeature.loadArray(input);

			// Runs model inference and gets result.
			Normalized.Outputs outputs = model.process(inputFeature);
			TensorBuffer outputFeature = outputs.getOutputFeature0AsTensorBuffer();

			listener.output(max_index(outputFeature.getFloatArray()));

			model.close();
		} catch (IOException e) {
			listener.output(4);
			listener.errorDes(e.getMessage());
		}
	}

	private static int max_index(float[] arr) {
		float result = 0f;
		int result_f = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > result) {
				result = arr[i];
				result_f = i;
			}
		}
		return result_f;
	}

	public interface AnswerListener {
		void output(int out);

		void onStart();

		void errorDes(String err);
	}
}
